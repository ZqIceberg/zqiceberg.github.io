# divide and conquer分治

### 概念

分治，将较大规模的问题分解成几个较小规模的问题。

引入例子：猜数字游戏，从几楼扔下手机不会摔坏，查找C盘中最大的文件，黄页电话簿，翻字典。



#### 快速排序(先找分界点再递归)

```cpp
void quick_sort(int q[], int l, int r)
{
    if (l >= r) return;

    int i = l - 1, j = r + 1, x = q[l + r >> 1];
    while (i < j)
    {
        do i ++ ; while (q[i] < x);
        do j -- ; while (q[j] > x);
        if (i < j) swap(q[i], q[j]);
    }
    quick_sort(q, l, j), quick_sort(q, j + 1, r);
}
```



#### 归并排序(先递归再合并)

```cpp
void merge_sort(int q[], int l, int r)
{
    if (l >= r) return;

    int mid = l + r >> 1;
    merge_sort(q, l, mid);
    merge_sort(q, mid + 1, r);

    int k = 0, i = l, j = mid + 1;
    while (i <= mid && j <= r)
        if (q[i] <= q[j]) tmp[k ++ ] = q[i ++ ];
        else tmp[k ++ ] = q[j ++ ];

    while (i <= mid) tmp[k ++ ] = q[i ++ ];
    while (j <= r) tmp[k ++ ] = q[j ++ ];

    for (i = l, j = 0; i <= r; i ++, j ++ ) q[i] = tmp[j];
}
```



#### 快速幂(拓展移位运算，二进制的理解)

求$a^b$模  $p$

1. 分治的方法

```cpp
//任意一个数p，可以表示成 p = 2 * p/2 + p%2
//b^(2 * p/2 + p%2)，就可以拆开后，递归调用f(p/2)，递归终止边界是p == 0, return 1;

LL t = f(p/2) % k;
t = (t * t) % k;

if (p % 2 == 1) t = (t * b) % k;
```

2. 移位运算的方法

```cpp
b可以表示成二进制 = ck-1 * 2^k-1 + ck-2 * 2^k-2 * ... * c0 * 2^0
a^b = a^(ck-1 * 2^k-1) * a^(ck-2 * 2^k-2) * ... * a^(c0*20)
当ci=1的时候，把乘积累积到答案中
```

```cpp
//求 m^k mod p，时间复杂度 O(logk)。
int qmi(int m, int k, int p)
{
    int res = 1 % p, t = m;
    while (k)
    {
        if (k&1) res = res * t % p;
        t = t * t % p;
        k >>= 1;
    }
    return res;
}
```



#### 二分查找(有序序列中查找元素)

二分的基础用法是在单调序列或单调函数中进行查找。因此当问题的答案具有单调性时，就可以通过二分把求解转化为判定。其实，写二分的时候并不容易，写check函数的时候，有很多细节之处需要仔细考虑。

对于整数域上的二分，需要注意终止边界、左右区分取舍时的开闭请，避免漏掉进入死循环。

对于实数域上的二分，需要注意精度问题。

二分的实现模板有很多种，以下给出的模板是yxc的，非常好用。

```cpp
//整数二分
bool check(int x) {/* ... */} // 检查x是否满足某种性质

// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：
int bsearch_1(int l, int r)
{
    while (l < r)
    {
        int mid = l + r >> 1;
        if (check(mid)) r = mid;    // check()判断mid是否满足性质
        else l = mid + 1;
    }
    return l;
}

// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：
int bsearch_2(int l, int r)
{
    while (l < r)
    {
        int mid = l + r + 1 >> 1;
        if (check(mid)) l = mid;
        else r = mid - 1;
    }
    return l;
}

//注意，分析题意，画数轴，看mid的右边是答案，还是mid的左边是答案
```



```cpp
//浮点数二分，还有循环50次的写法
bool check(double x) {/* ... */} // 检查x是否满足某种性质

double bsearch_3(double l, double r)
{
    const double eps = 1e-6;   // eps 表示精度，取决于题目对精度的要求
    while (r - l > eps)
    {
        double mid = (l + r) / 2;
        if (check(mid)) r = mid;
        else l = mid;
    }
    return l;
}
```



#### 二分答案(check函数的模拟)

一个宏观的最优化问题也可以抽象为函数，其“定义域”是该问题下的可行方案，对这些可行方案进行评估得到的数值构成函数的“值域”。假设评估得到的数值最高值是S，对于大于S的都不合法，对于小于等于s的都是合法的，这样问题的值域就有一种特殊的单调性，在S的一侧合法，在S的另一侧不合法。借助二分，我们把求最优解的问题，转化为给定一个值mid，判定是否存在一个可行方案评分达到mid的问题。

二分答案可以用来处理“最大的最小”或“最小的最大”问题。（记录答案的二分写法，check()函数经常写不准确的问题）



#### 分形(找规律)

/



#### STL的使用(下标问题和避免SE)

```cpp
//STL
int pos = lower_bound(a, a + n, x) - a;
int pos = upper_bound(a, a + n, x) - a;
```



#### 进阶的有，三分，分数规划

/



### 《一本通》题目

##### [【例7.4】 循环比赛日程表](http://ybt.ssoier.cn:8088/problem_show.php?pid=1325)

分形

##### [【例7.5】 取余运算（mod）](http://ybt.ssoier.cn:8088/problem_show.php?pid=1326)

快速幂

##### [【例7.6】黑白棋子的移动](http://ybt.ssoier.cn:8088/problem_show.php?pid=1327)

这道题目研究很长时间。找规律，写代码都花费了较长时间

##### [【例7.7】光荣的梦想](http://ybt.ssoier.cn:8088/problem_show.php?pid=1328)

逆序对

##### [2011](http://ybt.ssoier.cn:8088/problem_show.php?pid=1234)

快速幂

##### [输出前k大的数](http://ybt.ssoier.cn:8088/problem_show.php?pid=1235)

排序

##### [区间合并](http://ybt.ssoier.cn:8088/problem_show.php?pid=1236)

读懂题意后，排序，从左往右贪心

##### [求排列的逆序数](http://ybt.ssoier.cn:8088/problem_show.php?pid=1237)

逆序对

##### [一元三次方程求解](http://ybt.ssoier.cn:8088/problem_show.php?pid=1238)

```cpp
//check函数是f(x) * f(mid) < 0， 而不是f(mid) == 0之类的
```

##### [统计数字](http://ybt.ssoier.cn:8088/problem_show.php?pid=1239)

不能用STL，排序一下，双指针就行了

##### [查找最接近的元素](http://ybt.ssoier.cn:8088/problem_show.php?pid=1240)

数列上进行二分查找，找边界

##### [二分法求函数的零点](http://ybt.ssoier.cn:8088/problem_show.php?pid=1241)

二分答案（浮点数二分模板，写check函数）

##### [网线主管](http://ybt.ssoier.cn:8088/problem_show.php?pid=1242)

二分答案（整数二分模板，写check函数）

##### [月度开销](http://ybt.ssoier.cn:8088/problem_show.php?pid=1243)

二分答案，根据题意写check函数，这块经常写不好。

理解一下，数轴上表示单调性的图，右侧区间都是答案。（如果月度开销小了话，就会需要超过M个预算周期，就不满足条件了）

##### [和为给定数](http://ybt.ssoier.cn:8088/problem_show.php?pid=1244)

数轴上二分查找就可以了，唯独这道题目不能用STL

##### [不重复地输出数](http://ybt.ssoier.cn:8088/problem_show.php?pid=1245)

直接用set<int>处理了

##### [膨胀的木棍](http://ybt.ssoier.cn:8088/problem_show.php?pid=1246)

花费了很长时间的题目，不太了解几何概念。

```cpp
	//公式，弧度，角度，PII，acos(-1)=PII，弧长= 半径*弧度
	//l = degree * r    圆心角弧度数 * 半径
	//r * sin(degree) * 2 = d;  弦长
	//so, 2 * sin(degree) * l = d * degree

	double L2 = (1 + N * C) * L; //弧长
	double l = 0.0, r = acos(-1.0), ans = 0.0;  //0, 180度
	while (r - l > eps){
		double mid = (l + r) / 2;
		if (L * mid + eps < 2 * sin(mid/2) * L2) l = mid, ans = mid;
		else r = mid;
	}

	double banjing = L2 / ans;
	double x = banjing - banjing * cos(ans / 2);
	printf("%.3lf\n", x);
```

##### [河中跳房子](http://ybt.ssoier.cn:8088/problem_show.php?pid=1247)

noip2015tg

二分答案，这道题目做的时候，还是输在了写check函数上

1.怎么去表达搬走石头的操作 2.求的是最长的最短距离，也就是mid左侧都是答案，注意边界的写法

我做的时候，最初的时候，理解成了mid的右侧是答案，造成了很多迷惑。后来发现mid左侧是答案后，就迎刃而解了



#### 其他题目

##### [Fractal Streets](http://poj.org/problem?id=3889)

分形，著名的通过一定规律无限包含自身的“分形”图。



#### 参考

《算法竞赛进阶指南》