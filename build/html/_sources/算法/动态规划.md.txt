## dp动态规划

### 概念

现在，同学们已经对“问题与状态空间”之间的类比有了更深入的认识。

* 递推和递归是两种遍历状态空间的基本方法

* 搜索算法，处理指数级别等非多项式复杂度的问题

* 动态规划算法，针对满足特定条件的一类问题，对各状态维度进行分阶段、有顺序、无重复、决策性的遍历求解

**动态规划**，把原问题视作若干个重叠子问题的逐层递进，每个子问题的求解过程都构成一个“**阶段**”。在完成前一个阶段的计算后，动态规划才会执行下一阶段的计算。为了保证这些计算能够按顺序、不重复地进行，动态规划要求已经求解的子问题不受后续阶段的影响。（这个叫做“无后效性”）动态规划对状态空间的遍历，构成了一张有向无环图，遍历顺序就是该有向无环图的一个拓扑序。（有向无环图中的node，对应问题中的“**状态**”。图中的edge对应状态之间的“**转移**”，转移的选取就是动态规划中的“**决策**”）

"**最优子结构性质**"，求最优解的问题时，下一阶段的最优解应该能够由前面各阶段子问题的最优解导出。在阶段计算完成时，动态规划只会在每个状态上保留与最终解集相关的部分代表信息，这些代表信息应该具有可重复的求解过程，并能够导出后续阶段的代表信息。这样一来，动态规划对状态的抽象和子问题的重叠递进才能够起到优化作用。

**状态、阶段、决策**是构成动态规划算法的三要素。

**子问题重叠性、无后效性、最优子结构**是问题能用动态规划求解的三个基本条件。

动态规划算法把相同的计算过程作用于各阶段的同类子问题，就好像把一个固定的公式的格式相同的若干输入数据上运行。定义出了动态规划的计算过程，就可以编程实现了，这个计算过程被称为“**状态转移方程**”。

如何把问题形式化为状态空间，进一步抽象出动态规划的“状态表示”和“阶段划分”，是一件考查智力而非套路的事情。对状态设计，子结构的挖掘，是核心要点。

```
对于一个dp问题的描述框架：
1.问题描述
2.状态表示
3.阶段划分
4.转移方程
5.边界
6.目标
```



### 线性dp

具有线性“阶段”划分的动态规划算法被称为线性dp，经典例题：最长上升子序列（LIS）、最长公共子序列（LCS）、数字三角形（IOI1994），这三个问题，需要计算的对象表现出明显的维度以及有序性。每个状态的求解直接构成一个阶段，这使得dp的状态表示就是阶段的表示。因此，我们只需要在每个维度上各取一个坐标值作为dp的状态，自然就可以描绘出“已求解部分”在状态空间中的轮廓特征，该轮廓的进展就是阶段的推移。每个状态的求解，显然只与之前阶段的最有解有关，这体现了“最优子结构”。接下来，按顺序依次循环每个维度，根据问题要求，递推求解，具体实现。

##### [895. 最长上升子序列](https://www.acwing.com/problem/content/897/)

*max_element(dp + 1, dp + 1 + n)  这句用法

##### [897. 最长公共子序列](https://www.acwing.com/problem/content/899/)

在第一序列前i个字母中出现，且在第二个序列前j个字母中出现的子序列

##### [898. 数字三角形](https://www.acwing.com/problem/content/900/)

acwing上的数据更丰富一些，需要对dp进行初始化成负无穷，每一行0 ~ i+1都要初始化



### 背包

背包是线性dp中一类重要而特殊的模型

#### 0/1背包

#### 完全背包

#### 多重背包

#### 分组背包



### 区间dp

### 树形dp

#### 状态压缩dp

#### 倍增优化dp

